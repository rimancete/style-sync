// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id       String @id @default(cuid())
  name     String // "Unidade 1", "Unidade 2"  
  address  String
  phone    String
  
  professionals Professional[]
  bookings     Booking[]
  servicePricing ServicePricing[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("tenants")
}

model Professional {
  id       String  @id @default(cuid())
  name     String  // "Michel", "Luiz", "Dario" 
  photoUrl String?
  isActive Boolean @default(true)
  tenantId String
  
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookings Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("professionals")
}

model Service {
  id          String @id @default(cuid())
  name        String // "Social + Barba"
  description String?
  duration    Int    // minutes (single service only)
  
  pricing ServicePricing[]
  bookings Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("services")
}

model ServicePricing {
  id        String  @id @default(cuid())
  serviceId String
  tenantId  String  
  price     Decimal @db.Decimal(10,2)
  
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([serviceId, tenantId])
  @@map("service_pricing")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  password String
  name     String
  phone    String?
  role     UserRole @default(CLIENT)
  
  bookings Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}

model Booking {
  id             String        @id @default(cuid())
  userId         String
  tenantId       String
  serviceId      String
  professionalId String?       // NULL = "Any professional"
  scheduledAt    DateTime
  status         BookingStatus @default(PENDING)
  totalPrice     Decimal       @db.Decimal(10,2)
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant       Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  professional Professional? @relation(fields: [professionalId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("bookings")
}

enum UserRole {
  CLIENT
  STAFF
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
