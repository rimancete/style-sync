generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id            String   @id @default(cuid())
  code          String   @unique
  name          String
  addressFormat Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenants       Tenant[]

  @@map("countries")
}

model Tenant {
  id               String           @id @default(cuid())
  name             String
  phone            String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  countryCode      String
  street           String
  unit             String?
  district         String?
  city             String
  stateProvince    String
  postalCode       String
  formattedAddress String
  countryId        String
  country          Country          @relation(fields: [countryId], references: [id])
  bookings         Booking[]
  professionals    Professional[]
  servicePricing   ServicePricing[]

  @@map("tenants")
}

model Professional {
  id        String    @id @default(cuid())
  name      String
  photoUrl  String?
  isActive  Boolean   @default(true)
  tenantId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("professionals")
}

model Service {
  id          String           @id @default(cuid())
  name        String
  description String?
  duration    Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  bookings    Booking[]
  pricing     ServicePricing[]

  @@map("services")
}

model ServicePricing {
  id        String   @id @default(cuid())
  serviceId String
  tenantId  String
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([serviceId, tenantId])
  @@map("service_pricing")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  phone     String?
  role      UserRole  @default(CLIENT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]

  @@map("users")
}

model Booking {
  id             String        @id @default(cuid())
  userId         String
  tenantId       String
  serviceId      String
  professionalId String?
  scheduledAt    DateTime
  status         BookingStatus @default(PENDING)
  totalPrice     Decimal       @db.Decimal(10, 2)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  professional   Professional? @relation(fields: [professionalId], references: [id])
  service        Service       @relation(fields: [serviceId], references: [id])
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

enum UserRole {
  CLIENT
  STAFF
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
