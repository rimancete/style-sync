generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id            String   @id @default(cuid())
  code          String   @unique
  name          String
  addressFormat Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  branches      Branch[]

  @@map("countries")
}

model Customer {
  id          String @id @default(cuid())
  name        String
  urlSlug     String @unique

  // Branding Configuration
  documentTitle   String @default("")
  logoUrl     String?
  logoAlt     String @default("")

  // Favicons
  favicon32x32  String?
  favicon16x16  String?
  appleTouch    String?

  // Theme Colors (Light theme)
  primaryMain     String @default("#272726FF")
  primaryLight    String @default("#706E6DFF")
  primaryDark     String @default("#1B1B1BFF")
  primaryContrast String @default("#ECE8E6FF")

  secondaryMain     String @default("#8D8C8BFF")
  secondaryLight    String @default("#E7E7E6FF")
  secondaryDark     String @default("#3B3B3BFF")
  secondaryContrast String @default("#1B1B1BFF")

  backgroundColor String @default("#F7F7F7FF")

  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  branches      Branch[]
  services      Service[]
  users         UserCustomer[]
  professionals Professional[]

  @@map("customers")
}

model Branch {
  id               String           @id @default(cuid())
  name             String
  phone            String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  countryCode      String
  street           String
  unit             String?
  district         String?
  city             String
  stateProvince    String
  postalCode       String
  formattedAddress String
  countryId        String
  customerId       String
  country          Country          @relation(fields: [countryId], references: [id])
  customer         Customer         @relation(fields: [customerId], references: [id])
  bookings         Booking[]
  professionals    Professional[]
  servicePricing   ServicePricing[]

  @@map("tenants")
}

model Professional {
  id        String    @id @default(cuid())
  name      String
  photoUrl  String?
  isActive  Boolean   @default(true)
  branchId  String
  customerId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  customer  Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("professionals")
}

model Service {
  id          String           @id @default(cuid())
  name        String
  description String?
  duration    Int
  customerId  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  customer    Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  pricing     ServicePricing[]

  @@map("services")
}

model ServicePricing {
  id        String   @id @default(cuid())
  serviceId String
  branchId  String
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([serviceId, branchId])
  @@map("service_pricing")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  phone     String?
  role      UserRole  @default(CLIENT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  customers UserCustomer[]

  @@map("users")
}

model UserCustomer {
  id         String   @id @default(cuid())
  userId     String
  customerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([userId, customerId])
  @@map("user_customers")
}

model Booking {
  id             String        @id @default(cuid())
  userId         String
  branchId       String
  serviceId      String
  professionalId String?
  scheduledAt    DateTime
  status         BookingStatus @default(PENDING)
  totalPrice     Decimal       @db.Decimal(10, 2)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  professional   Professional? @relation(fields: [professionalId], references: [id])
  service        Service       @relation(fields: [serviceId], references: [id])
  branch         Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

enum UserRole {
  CLIENT
  STAFF
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
